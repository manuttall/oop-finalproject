window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "geometry", "modulename": "geometry", "kind": "module", "doc": "<p>geometry package: Core data structures for 3D and 2D rendering.</p>\n\n<p>This package provides foundational geometric classes used for 3D rendering,\nscene representation, and 2D projection. It includes both primitive types\n(points, vectors, vertices) and composite types (faces, meshes, shaders).</p>\n\n<p>The following classes are re-exported for convenient access:</p>\n\n<ul>\n<li>Face2D: A triangle defined in 2D screen space</li>\n<li>Face3D: A triangle defined by 3D vertices</li>\n<li>Mesh3D: A collection of connected Face3D objects</li>\n<li>Point: A point in 2D Cartesian space</li>\n<li>Shader: A color representation used for rendering faces</li>\n<li>Vector: A 3D vector supporting arithmetic and geometric operations</li>\n<li>Vertex: A point in 3D space</li>\n</ul>\n\n<p>Example:\n    from geometry import Vertex, Vector, Face3D</p>\n"}, {"fullname": "geometry.Face2D", "modulename": "geometry", "qualname": "Face2D", "kind": "class", "doc": "<p>A triangular face made of 3 points in the 2D Cartesian plane.</p>\n"}, {"fullname": "geometry.Face2D.__init__", "modulename": "geometry", "qualname": "Face2D.__init__", "kind": "function", "doc": "<p>Constructor</p>\n\n<p>Args:\n    points (List[Point]): List of exactly 3 points.\n    dist (float): Distance value used for sorting (e.g., depth).\n    color (Shader): Color shader for rendering.</p>\n\n<p>Raises:\n    ValueError: If points list does not contain exactly 3 points.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">Point</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dist</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">shader</span><span class=\"o\">.</span><span class=\"n\">Shader</span></span>)</span>"}, {"fullname": "geometry.Face2D.points", "modulename": "geometry", "qualname": "Face2D.points", "kind": "variable", "doc": "<p>Gets the points of the face.</p>\n\n<p>Returns:\n    List[Point]: List of 3 points.</p>\n", "annotation": ": List[geometry.point.Point]"}, {"fullname": "geometry.Face2D.distance", "modulename": "geometry", "qualname": "Face2D.distance", "kind": "variable", "doc": "<p>Gets the distance value.</p>\n\n<p>Returns:\n    float: Distance used for sorting.</p>\n", "annotation": ": float"}, {"fullname": "geometry.Face2D.color", "modulename": "geometry", "qualname": "Face2D.color", "kind": "variable", "doc": "<p>Gets the color shader.</p>\n\n<p>Returns:\n    Shader: The color of the face.</p>\n", "annotation": ": geometry.shader.Shader"}, {"fullname": "geometry.Face3D", "modulename": "geometry", "qualname": "Face3D", "kind": "class", "doc": "<p>A triangular face made of 3 vertices in 3D space.</p>\n"}, {"fullname": "geometry.Face3D.__init__", "modulename": "geometry", "qualname": "Face3D.__init__", "kind": "function", "doc": "<p>Constructor</p>\n\n<p>Args:\n    points (List[Vertex]): List of exactly 3 vertices.\n    color (Shader, optional): Face color. Defaults to black.</p>\n\n<p>Raises:\n    ValueError: If points list does not have exactly 3 vertices.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">Vertex</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">shader</span><span class=\"o\">.</span><span class=\"n\">Shader</span> <span class=\"o\">=</span> <span class=\"n\">Shader</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "geometry.Face3D.points", "modulename": "geometry", "qualname": "Face3D.points", "kind": "variable", "doc": "<p>Property to get points.</p>\n\n<p>Returns:\n    List[Vertex]: Vertices defining the face.</p>\n", "annotation": ": List[geometry.vertex.Vertex]"}, {"fullname": "geometry.Face3D.color", "modulename": "geometry", "qualname": "Face3D.color", "kind": "variable", "doc": "<p>Property to get color.</p>\n\n<p>Returns:\n    Shader: Face color.</p>\n", "annotation": ": geometry.shader.Shader"}, {"fullname": "geometry.Face3D.centroid", "modulename": "geometry", "qualname": "Face3D.centroid", "kind": "function", "doc": "<p>Calculates the centroid (average position) of the face.</p>\n\n<p>Returns:\n    Vertex: Centroid of the face.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">Vertex</span>:</span></span>", "funcdef": "def"}, {"fullname": "geometry.Face3D.closest_point", "modulename": "geometry", "qualname": "Face3D.closest_point", "kind": "function", "doc": "<p>Finds the closest point on the face to a given vertex.</p>\n\n<p>Includes comparing centroid and vertices.</p>\n\n<p>Args:\n    new_point (Vertex): Point to compare.</p>\n\n<p>Returns:\n    Vertex: Closest point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_point</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">Vertex</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">Vertex</span>:</span></span>", "funcdef": "def"}, {"fullname": "geometry.Face3D.distance", "modulename": "geometry", "qualname": "Face3D.distance", "kind": "function", "doc": "<p>Calculates approximate distance from the face to a point.</p>\n\n<p>Uses the average of the two farthest vertex distances\n(useful for painter's algorithm sorting).</p>\n\n<p>Args:\n    new_point (Vertex): Point to measure from.</p>\n\n<p>Returns:\n    float: Distance estimate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_point</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">Vertex</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "geometry.Face3D.distance_closest", "modulename": "geometry", "qualname": "Face3D.distance_closest", "kind": "function", "doc": "<p>Calculates distance to the closest point on the face.</p>\n\n<p>Args:\n    new_point (Vertex): Point to compare.</p>\n\n<p>Returns:\n    float: Distance to closest point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_point</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">Vertex</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "geometry.Mesh3D", "modulename": "geometry", "qualname": "Mesh3D", "kind": "class", "doc": "<p>Mesh3D class to store a list of faces with a base shader and variance.</p>\n"}, {"fullname": "geometry.Mesh3D.__init__", "modulename": "geometry", "qualname": "Mesh3D.__init__", "kind": "function", "doc": "<p>Constructor</p>\n\n<p>Args:\n    faces (List[Face3D]): List of Face3D objects in the mesh.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">faces</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">face3d</span><span class=\"o\">.</span><span class=\"n\">Face3D</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "geometry.Mesh3D.faces", "modulename": "geometry", "qualname": "Mesh3D.faces", "kind": "variable", "doc": "<p>Gets the faces of the mesh.</p>\n\n<p>Returns:\n    List[Face3D]: List of faces.</p>\n", "annotation": ": List[geometry.face3d.Face3D]"}, {"fullname": "geometry.Mesh3D.base_shader", "modulename": "geometry", "qualname": "Mesh3D.base_shader", "kind": "variable", "doc": "<p>Gets the base shader of the mesh.</p>\n\n<p>Returns:\n    Shader | None: The base shader if set, else None.</p>\n", "annotation": ": geometry.shader.Shader | None"}, {"fullname": "geometry.Mesh3D.variance", "modulename": "geometry", "qualname": "Mesh3D.variance", "kind": "variable", "doc": "<p>Gets the color variance.</p>\n\n<p>Returns:\n    int: Variance value.</p>\n", "annotation": ": int"}, {"fullname": "geometry.Mesh3D.set_color", "modulename": "geometry", "qualname": "Mesh3D.set_color", "kind": "function", "doc": "<p>Sets all faces in the mesh to a uniform shader.</p>\n\n<p>Args:\n    value (Shader): Shader color to apply to all faces.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">shader</span><span class=\"o\">.</span><span class=\"n\">Shader</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "geometry.Mesh3D.set_color_variance", "modulename": "geometry", "qualname": "Mesh3D.set_color_variance", "kind": "function", "doc": "<p>Applies random color variance around a base Shader.</p>\n\n<p>Args:\n    value (Shader | None, optional): Base shader to vary from.\n        If None, uses the stored base_shader.\n    variance (int, optional): Color variation range. Defaults to 25.</p>\n\n<p>Raises:\n    ValueError: If no faces exist and no base shader is available.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">shader</span><span class=\"o\">.</span><span class=\"n\">Shader</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">variance</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">25</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "geometry.Mesh3D.add", "modulename": "geometry", "qualname": "Mesh3D.add", "kind": "function", "doc": "<p>Adds a Face3D to the mesh.</p>\n\n<p>Args:\n    new_face (Face3D): New face to add.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_face</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">face3d</span><span class=\"o\">.</span><span class=\"n\">Face3D</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "geometry.Point", "modulename": "geometry", "qualname": "Point", "kind": "class", "doc": "<p>A point of the form (x, y) in the Cartesian plane.</p>\n"}, {"fullname": "geometry.Point.__init__", "modulename": "geometry", "qualname": "Point.__init__", "kind": "function", "doc": "<p>Constructor</p>\n\n<p>Args:\n    x (float): coordinate along the x-axis\n    y (float): coordinate along the y-axis</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "geometry.Point.x", "modulename": "geometry", "qualname": "Point.x", "kind": "variable", "doc": "<p>Property to get x.</p>\n\n<p>Returns:\n    float: x</p>\n", "annotation": ": float"}, {"fullname": "geometry.Point.y", "modulename": "geometry", "qualname": "Point.y", "kind": "variable", "doc": "<p>Property to get y.</p>\n\n<p>Returns:\n    float: y</p>\n", "annotation": ": float"}, {"fullname": "geometry.Shader", "modulename": "geometry", "qualname": "Shader", "kind": "class", "doc": "<p>Shader class for storing and converting RGB color values.</p>\n"}, {"fullname": "geometry.Shader.__init__", "modulename": "geometry", "qualname": "Shader.__init__", "kind": "function", "doc": "<p>Constructor</p>\n\n<p>Args:\n    *args (int | str): Either 3 integers (r, g, b) or 1 hex string '#rrggbb'.</p>\n\n<p>Raises:\n    ValueError: If arguments are not a valid color format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "geometry.Shader.r", "modulename": "geometry", "qualname": "Shader.r", "kind": "variable", "doc": "<p>Property to get r.</p>\n\n<p>Returns:\n    int: Red value.</p>\n", "annotation": ": int"}, {"fullname": "geometry.Shader.g", "modulename": "geometry", "qualname": "Shader.g", "kind": "variable", "doc": "<p>Property to get g.</p>\n\n<p>Returns:\n    int: Green value.</p>\n", "annotation": ": int"}, {"fullname": "geometry.Shader.b", "modulename": "geometry", "qualname": "Shader.b", "kind": "variable", "doc": "<p>Property to get b.</p>\n\n<p>Returns:\n    int: Blue value.</p>\n", "annotation": ": int"}, {"fullname": "geometry.Shader.hex_to_rgb", "modulename": "geometry", "qualname": "Shader.hex_to_rgb", "kind": "function", "doc": "<p>Converts a hex color string to an (r, g, b) tuple.</p>\n\n<p>Args:\n    hex_color (str): Hex string like '#ff00ff'.</p>\n\n<p>Returns:\n    tuple[int, int, int]: Red, Green, Blue components.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hex_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "geometry.Shader.rgb_to_hex", "modulename": "geometry", "qualname": "Shader.rgb_to_hex", "kind": "function", "doc": "<p>Converts RGB values to a hex color string.</p>\n\n<p>Args:\n    r (int): Red value.\n    g (int): Green value.\n    b (int): Blue value.</p>\n\n<p>Returns:\n    str: Hex string like '#ff00ff'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">g</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "geometry.Shader.rgb", "modulename": "geometry", "qualname": "Shader.rgb", "kind": "variable", "doc": "<p>Property to get (r, g, b) tuple.</p>\n\n<p>Returns:\n    tuple[int, int, int]: (r, g, b)</p>\n", "annotation": ": Tuple[int, int, int]"}, {"fullname": "geometry.Shader.hex", "modulename": "geometry", "qualname": "Shader.hex", "kind": "variable", "doc": "<p>Property to get hex string representation.</p>\n\n<p>Returns:\n    str: Hex string.</p>\n", "annotation": ": str"}, {"fullname": "geometry.Vector", "modulename": "geometry", "qualname": "Vector", "kind": "class", "doc": "<p>A vector in 3D space represented by its components (x, y, z).</p>\n", "bases": "geometry.coord3d.Coordinate3D"}, {"fullname": "geometry.Vector.x", "modulename": "geometry", "qualname": "Vector.x", "kind": "variable", "doc": "<p>Property to get x.</p>\n\n<p>Returns:\n    float: x</p>\n", "annotation": ": float"}, {"fullname": "geometry.Vector.y", "modulename": "geometry", "qualname": "Vector.y", "kind": "variable", "doc": "<p>Property to get y.</p>\n\n<p>Returns:\n    float: y</p>\n", "annotation": ": float"}, {"fullname": "geometry.Vector.z", "modulename": "geometry", "qualname": "Vector.z", "kind": "variable", "doc": "<p>Property to get z.</p>\n\n<p>Returns:\n    float: z</p>\n", "annotation": ": float"}, {"fullname": "geometry.Vector.magnitude", "modulename": "geometry", "qualname": "Vector.magnitude", "kind": "variable", "doc": "<p>Calculates the magnitude (length) of the vector.</p>\n\n<p>Returns:\n    float: magnitude</p>\n", "annotation": ": float"}, {"fullname": "geometry.Vector.normalize", "modulename": "geometry", "qualname": "Vector.normalize", "kind": "variable", "doc": "<p>Returns the normalized (unit) vector.</p>\n\n<p>Returns:\n    Vector: normalized vector</p>\n\n<p>Raises:\n    ValueError: if the vector is zero and cannot be normalized</p>\n", "annotation": ": geometry.vector.Vector"}, {"fullname": "geometry.Vector.dot", "modulename": "geometry", "qualname": "Vector.dot", "kind": "function", "doc": "<p>Computes the dot product with another vector.</p>\n\n<p>Args:\n    other (Vector): another vector</p>\n\n<p>Returns:\n    float: dot product</p>\n\n<p>Raises:\n    TypeError: if other is not a Vector</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">Vector</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "geometry.Vector.cross", "modulename": "geometry", "qualname": "Vector.cross", "kind": "function", "doc": "<p>Computes the cross product with another vector.</p>\n\n<p>Args:\n    other (Vector): another vector</p>\n\n<p>Returns:\n    Vector: cross product vector</p>\n\n<p>Raises:\n    TypeError: if other is not a Vector</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">Vector</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">Vector</span>:</span></span>", "funcdef": "def"}, {"fullname": "geometry.Vertex", "modulename": "geometry", "qualname": "Vertex", "kind": "class", "doc": "<p>A vertex of the form (x, y, z) in 3D space.</p>\n", "bases": "geometry.coord3d.Coordinate3D"}, {"fullname": "geometry.Vertex.distance", "modulename": "geometry", "qualname": "Vertex.distance", "kind": "function", "doc": "<p>Calculate the distance between this vertex and another vertex.</p>\n\n<p>Args:\n    other (Vertex): another vertex</p>\n\n<p>Returns:\n    float: Euclidean distance</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">Vertex</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "scene", "modulename": "scene", "kind": "module", "doc": "<p>scene package: Core classes for scene management and 3D camera rendering.</p>\n\n<p>This package provides the main components needed to build, manage,\nand render 3D scenes, including camera control, screen output,\nfile imports, and scene organization.</p>\n\n<p>The following classes are re-exported for convenient access:</p>\n\n<ul>\n<li>AspectRatio: Represents the screen's aspect ratio</li>\n<li>Camera: Defines the viewpoint and projection system in 3D space</li>\n<li>Scene: Holds a collection of Mesh3D objects and the active Camera</li>\n<li>Screen: Manages the Tkinter window and draws the 2D projections</li>\n</ul>\n\n<p>Example:\n    from scene import Camera, Scene, Screen</p>\n"}, {"fullname": "scene.AspectRatio", "modulename": "scene", "qualname": "AspectRatio", "kind": "class", "doc": "<p>A class representing vertical and horizontal components of an aspect ratio.</p>\n"}, {"fullname": "scene.AspectRatio.__init__", "modulename": "scene", "qualname": "AspectRatio.__init__", "kind": "function", "doc": "<p>Constructor</p>\n\n<p>Args:\n    horizontal (float): Horizontal component of the aspect ratio.\n    vertical (float): Vertical component of the aspect ratio.</p>\n\n<p>Raises:\n    ValueError: If either component is not positive.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">horizontal</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">vertical</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "scene.AspectRatio.horizontal", "modulename": "scene", "qualname": "AspectRatio.horizontal", "kind": "variable", "doc": "<p>Get the horizontal component.</p>\n\n<p>Returns:\n    float: Horizontal value.</p>\n", "annotation": ": float"}, {"fullname": "scene.AspectRatio.vertical", "modulename": "scene", "qualname": "AspectRatio.vertical", "kind": "variable", "doc": "<p>Get the vertical component.</p>\n\n<p>Returns:\n    float: Vertical value.</p>\n", "annotation": ": float"}, {"fullname": "scene.AspectRatio.ratio", "modulename": "scene", "qualname": "AspectRatio.ratio", "kind": "function", "doc": "<p>Calculate and return the scalar aspect ratio (horizontal / vertical).</p>\n\n<p>Returns:\n    float: The scalar aspect ratio.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "scene.Camera", "modulename": "scene", "qualname": "Camera", "kind": "class", "doc": "<p>A camera defined by its position and orientation in 3D space.</p>\n", "bases": "geometry.vertex.Vertex"}, {"fullname": "scene.Camera.__init__", "modulename": "scene", "qualname": "Camera.__init__", "kind": "function", "doc": "<p>Constructor</p>\n\n<p>Args:\n    origin (Vertex): Camera's position in 3D space.\n    look_at (Vertex): Point the camera looks at.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">origin</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">Vertex</span>, </span><span class=\"param\"><span class=\"n\">look_at</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">Vertex</span></span>)</span>"}, {"fullname": "scene.Camera.set_look_at", "modulename": "scene", "qualname": "Camera.set_look_at", "kind": "function", "doc": "<p>Sets a new look-at point for the camera and recalculates axes.</p>\n\n<p>Args:\n    new_look_at (Vertex): New target point for the camera.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_look_at</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">Vertex</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scene.Camera.forward", "modulename": "scene", "qualname": "Camera.forward", "kind": "variable", "doc": "<p>Returns the forward (view direction) vector.</p>\n\n<p>Returns:\n    Vector: Normalized forward vector.</p>\n", "annotation": ": geometry.vector.Vector"}, {"fullname": "scene.Camera.up", "modulename": "scene", "qualname": "Camera.up", "kind": "variable", "doc": "<p>Returns the up vector.</p>\n\n<p>Returns:\n    Vector: Normalized up vector.</p>\n", "annotation": ": geometry.vector.Vector"}, {"fullname": "scene.Camera.right", "modulename": "scene", "qualname": "Camera.right", "kind": "variable", "doc": "<p>Returns the right vector.</p>\n\n<p>Returns:\n    Vector: Normalized right vector.</p>\n", "annotation": ": geometry.vector.Vector"}, {"fullname": "scene.Camera.is_vertex_in_front", "modulename": "scene", "qualname": "Camera.is_vertex_in_front", "kind": "function", "doc": "<p>Checks if a 3D vertex is in front of the camera.</p>\n\n<p>Args:\n    vertex (Vertex): 3D vertex to check.</p>\n\n<p>Returns:\n    bool: True if vertex is in front, else False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vertex</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">Vertex</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "scene.Camera.is_face_in_front", "modulename": "scene", "qualname": "Camera.is_face_in_front", "kind": "function", "doc": "<p>Checks if any vertex of a face is in front of the camera.</p>\n\n<p>Args:\n    face (Face3D): Face composed of 3 vertices.</p>\n\n<p>Returns:\n    bool: True if any vertex is in front.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">face</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">face3d</span><span class=\"o\">.</span><span class=\"n\">Face3D</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "scene.Camera.project_vertex", "modulename": "scene", "qualname": "Camera.project_vertex", "kind": "function", "doc": "<p>Projects a 3D vertex onto the camera's 2D space.</p>\n\n<p>Args:\n    vertex (Vertex): 3D vertex to project.</p>\n\n<p>Returns:\n    Point: 2D projected point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vertex</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">Vertex</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">Point</span>:</span></span>", "funcdef": "def"}, {"fullname": "scene.Camera.project_face", "modulename": "scene", "qualname": "Camera.project_face", "kind": "function", "doc": "<p>Projects a 3D face onto 2D space.</p>\n\n<p>Args:\n    face (Face3D): 3D face.</p>\n\n<p>Returns:\n    Face2D: 2D projection of the face.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">face</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">face3d</span><span class=\"o\">.</span><span class=\"n\">Face3D</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">face2d</span><span class=\"o\">.</span><span class=\"n\">Face2D</span>:</span></span>", "funcdef": "def"}, {"fullname": "scene.Scene", "modulename": "scene", "qualname": "Scene", "kind": "class", "doc": "<p>Scene class to represent a collection of 3D meshes.</p>\n"}, {"fullname": "scene.Scene.__init__", "modulename": "scene", "qualname": "Scene.__init__", "kind": "function", "doc": "<p>Constructor</p>\n\n<p>Args:\n    active_cam (Camera): The active camera for rendering.\n    meshes (List[Mesh3D]): List of 3D meshes in the scene.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">active_cam</span><span class=\"p\">:</span> <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">Camera</span>,</span><span class=\"param\">\t<span class=\"n\">meshes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">mesh3d</span><span class=\"o\">.</span><span class=\"n\">Mesh3D</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "scene.Scene.meshes", "modulename": "scene", "qualname": "Scene.meshes", "kind": "variable", "doc": "<p>Property to get all meshes in the scene.</p>\n\n<p>Returns:\n    List[Mesh3D]: Meshes in the scene.</p>\n", "annotation": ": List[geometry.mesh3d.Mesh3D]"}, {"fullname": "scene.Scene.active_cam", "modulename": "scene", "qualname": "Scene.active_cam", "kind": "variable", "doc": "<p>Property to get the active camera.</p>\n\n<p>Returns:\n    Camera: Active camera for the scene.</p>\n", "annotation": ": scene.camera.Camera"}, {"fullname": "scene.Scene.add", "modulename": "scene", "qualname": "Scene.add", "kind": "function", "doc": "<p>Adds a new mesh to the scene.</p>\n\n<p>Args:\n    new_mesh (Mesh3D): New mesh to add.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_mesh</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">mesh3d</span><span class=\"o\">.</span><span class=\"n\">Mesh3D</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scene.Scene.make_render", "modulename": "scene", "qualname": "Scene.make_render", "kind": "function", "doc": "<p>Creates a render list of 2D faces from visible 3D meshes.</p>\n\n<p>Projects visible faces onto 2D space based on camera view.</p>\n\n<p>Returns:\n    List[Face2D]: List of 2D projected faces.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">face2d</span><span class=\"o\">.</span><span class=\"n\">Face2D</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "scene.Screen", "modulename": "scene", "qualname": "Screen", "kind": "class", "doc": "<p>A screen to render 2D triangles (Face2D) on a Tkinter canvas.</p>\n"}, {"fullname": "scene.Screen.__init__", "modulename": "scene", "qualname": "Screen.__init__", "kind": "function", "doc": "<p>Constructor</p>\n\n<p>Args:\n    aspect_ratio (AspectRatio): The aspect ratio of the canvas.\n    resolution (int): Scaling factor for canvas size.\n    background (Shader, optional): Background Shader color. Defaults to black.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">aspect_ratio</span><span class=\"p\">:</span> <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">aspect_ratio</span><span class=\"o\">.</span><span class=\"n\">AspectRatio</span>,</span><span class=\"param\">\t<span class=\"n\">resolution</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">background</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">shader</span><span class=\"o\">.</span><span class=\"n\">Shader</span> <span class=\"o\">=</span> <span class=\"n\">Shader</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "scene.Screen.show", "modulename": "scene", "qualname": "Screen.show", "kind": "function", "doc": "<p>Displays the window and starts the main event loop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scene.Screen.render", "modulename": "scene", "qualname": "Screen.render", "kind": "function", "doc": "<p>Renders a list of Face2D objects by creating the canvas, drawing them,\nand showing the window.</p>\n\n<p>Args:\n    faces (List[Face2D]): The 2D faces to render.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">faces</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">face2d</span><span class=\"o\">.</span><span class=\"n\">Face2D</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "utility", "modulename": "utility", "kind": "module", "doc": "<p>Utility package for supporting modules used in the 3D rendering engine.</p>\n\n<p>This package includes helper classes for input handling and file importing:</p>\n\n<ul>\n<li>FileImport: Singleton class to load and parse .obj-like mesh files</li>\n<li>Interface: Graphical interface to collect user input for scene configuration</li>\n</ul>\n\n<p>Example:\n    from utility import FileImport, Interface</p>\n"}, {"fullname": "utility.FileImport", "modulename": "utility", "qualname": "FileImport", "kind": "class", "doc": "<p>A Singleton class for importing 3D geometry from files.</p>\n\n<p>Raises:\n    NameError: if a second instance is created.</p>\n"}, {"fullname": "utility.FileImport.__init__", "modulename": "utility", "qualname": "FileImport.__init__", "kind": "function", "doc": "<p>Constructor. Enforces singleton.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "utility.FileImport.read_data", "modulename": "utility", "qualname": "FileImport.read_data", "kind": "function", "doc": "<p>Reads file data into internal storage, ignoring comment lines (#).</p>\n\n<p>Args:\n    filepath (str): Path to the input file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "utility.FileImport.make_list", "modulename": "utility", "qualname": "FileImport.make_list", "kind": "function", "doc": "<p>Creates a list of Mesh3D objects from parsed data.</p>\n\n<p>Raises:\n    ValueError: If no data loaded or format errors exist.</p>\n\n<p>Returns:\n    List[Mesh3D]: List of parsed meshes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">mesh3d</span><span class=\"o\">.</span><span class=\"n\">Mesh3D</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "utility.FileImport.read_file", "modulename": "utility", "qualname": "FileImport.read_file", "kind": "function", "doc": "<p>Reads a file and creates a list of Mesh3D objects.</p>\n\n<p>Args:\n    filepath (str): Path to the input file.</p>\n\n<p>Returns:\n    List[Mesh3D]: List of parsed meshes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">mesh3d</span><span class=\"o\">.</span><span class=\"n\">Mesh3D</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "utility.FileImport.get_data", "modulename": "utility", "qualname": "FileImport.get_data", "kind": "function", "doc": "<p>Gets the raw loaded data lines.</p>\n\n<p>Returns:\n    List[str]: Loaded file contents.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "utility.Interface", "modulename": "utility", "qualname": "Interface", "kind": "class", "doc": "<p>Interface to gather user input for configuring the 3D Engine.</p>\n"}, {"fullname": "utility.Interface.__init__", "modulename": "utility", "qualname": "Interface.__init__", "kind": "function", "doc": "<p>Constructor.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "utility.Interface.run", "modulename": "utility", "qualname": "Interface.run", "kind": "function", "doc": "<p>Runs the Tkinter interface and returns user input.</p>\n\n<p>Returns:\n    dict[str, Any]: Dictionary of collected user inputs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "engine", "modulename": "engine", "kind": "module", "doc": "<p>Engine class to manage loading meshes, setting up scenes, and rendering 3D objects.</p>\n"}, {"fullname": "engine.Engine", "modulename": "engine", "qualname": "Engine", "kind": "class", "doc": "<p>Engine manager class for the 3D rendering pipeline.</p>\n\n<p>Enforces the Singleton pattern.</p>\n"}, {"fullname": "engine.Engine.__init__", "modulename": "engine", "qualname": "Engine.__init__", "kind": "function", "doc": "<p>Constructor</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "engine.Engine.load_scene", "modulename": "engine", "qualname": "Engine.load_scene", "kind": "function", "doc": "<p>Loads scene data and initializes the camera and screen\nbased on user settings.</p>\n\n<p>Args:\n    settings (dict[str, Any]): User input parameters</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "engine.Engine.render_scene", "modulename": "engine", "qualname": "Engine.render_scene", "kind": "function", "doc": "<p>Renders the currently loaded scene.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "engine.Engine.main", "modulename": "engine", "qualname": "Engine.main", "kind": "function", "doc": "<p>Main entry point to launch the interface and render the scene.</p>\n\n<p>Reopens the interface when the render window is closed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();